/* 
 * Copyright (C) 2018 phramusca ( https://github.com/phramusca/ )
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package rommanager.main;

import rommanager.utils.ProgressBar;
import rommanager.utils.Popup;
import java.awt.Point;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;
import rommanager.utils.ProcessAbstract;
//FIXME 4 Reset (clear) rom jList on jTable lost selection
/**
 *
 * @author phramusca ( https://github.com/phramusca/JaMuz/ )
 */
public class RomManagerGUI extends javax.swing.JFrame {

    private final ProgressBar progressBar; //FIXME 5 Check usages of all ProgressBar numbers seem weird/unappropriate sometimes
    private static TableModelRom tableModel;
    
	private ProcessList processList;
	private ProcessRead processRead;
	private ProcessExport processExport;
	private ProcessSetScore processSetScore;
	
    /**
     * Creates new form RomManagerGUI
     */
    public RomManagerGUI() {
        initComponents();
        
		jTextFieldPathExport.setText(RomManager.options.get("romset.exportPath"));
		jTextFieldPathSource.setText(RomManager.options.get("romset.sourcePath"));
        
        progressBar = (ProgressBar)jProgressBar1;
        
		jTableRom.setRowHeight(IconBuffer.ICON_HEIGHT);
		
        tableModel = (TableModelRom) jTableRom.getModel();
        jTableRom.setRowSorter(null);
		//Adding columns from tableModel. Cannot be done automatically on properties
		// as done, in initComponents, before setColumnModel which removes the columns ...
		jTableRom.createDefaultColumnsFromModel();

		setColumn(0, 220, 220);
        setColumn(1, 100, 300);
		setColumn(2, 100, 800);
		setColumn(3, 100, 200);
		setColumn(4, 100, 150);
		setColumn(5, 100, 50);
		setColumn(6, 100, 200);
		
		DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setVerticalAlignment(SwingConstants.TOP);
        jTableRom.getColumnModel().getColumn(2).setCellRenderer(renderer);
		
		jSplitPane1.setResizeWeight(1);
		
		disableGUI("Reading ods file: ");
		new ReadOds(new CallBackProcess(), jTextFieldPathSource.getText()).start();
    }

	/**
	 *
	 * @param list
	 * @return
	 */
	public static DefaultListModel getModel(List<String> list) {
        return getModel(list, true);
    }
	
	/**
	 *
	 * @param list
	 * @param sort
	 * @return
	 */
	public static DefaultListModel getModel(List<String> list, boolean sort) {
        DefaultListModel model = new DefaultListModel();
        if(sort) { Collections.sort(list); }
        model.addElement("All");
        for(String element : list) {
            model.addElement(element);
        }
        return model;
    }
	
	private class ReadOds extends ProcessAbstract {
		private final ICallBackProcess callBack;
		private final String sourceFolder;
		public ReadOds(ICallBackProcess callBack, String sourceFolder) {
			super("Thread.RomManagerGUI.ReadOds");
			this.callBack = callBack;
			this.sourceFolder = sourceFolder;
		}
		@Override
		public void run() {
			RomManagerOds.readFile(tableModel, progressBar, sourceFolder);
			callBack.completed();
		}
	}
	
    private void setColumn(int index, int min, int pref) {
        TableColumn column = jTableRom.getColumnModel().getColumn(index);
		column.setMinWidth(min);
        column.setPreferredWidth(pref);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked");
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextFieldPathExport = new javax.swing.JTextField();
        jButtonOptionSelectFolderExport = new javax.swing.JButton();
        jTextFieldPathSource = new javax.swing.JTextField();
        jButtonOptionSelectFolderSource = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new ProgressBar();
        jButtonScanSource = new javax.swing.JButton();
        jButtonScore = new javax.swing.JButton();
        jButtonExport = new javax.swing.JButton();
        jButtonReadGameList = new javax.swing.JButton();
        jButtonAbort = new javax.swing.JButton();
        jLabelAction = new javax.swing.JLabel();
        jButtonSave = new javax.swing.JButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPaneSelectGenre1 = new javax.swing.JScrollPane();
        jListFilterConsole = new javax.swing.JList();
        jScrollPaneSelectGenre2 = new javax.swing.JScrollPane();
        jListFilterGenre = new javax.swing.JList();
        jScrollPaneSelectGenre4 = new javax.swing.JScrollPane();
        jListFilterRating = new javax.swing.JList();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPaneCheckTags1 = new javax.swing.JScrollPane();
        jTableRom = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListVersions = new javax.swing.JList<>();
        jButtonAuto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rom Manager");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextFieldPathExport.setEditable(false);

        jButtonOptionSelectFolderExport.setText("Select"); // NOI18N
        jButtonOptionSelectFolderExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOptionSelectFolderExportActionPerformed(evt);
            }
        });

        jTextFieldPathSource.setEditable(false);

        jButtonOptionSelectFolderSource.setText("Select"); // NOI18N
        jButtonOptionSelectFolderSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOptionSelectFolderSourceActionPerformed(evt);
            }
        });

        jLabel1.setText("Roms Source folder:");

        jLabel2.setText("Destination folder:");

        jProgressBar1.setString(""); // NOI18N
        jProgressBar1.setStringPainted(true);

        jButtonScanSource.setText("Scan Source"); // NOI18N
        jButtonScanSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonScanSourceActionPerformed(evt);
            }
        });

        jButtonScore.setText("Set Score");
        jButtonScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonScoreActionPerformed(evt);
            }
        });

        jButtonExport.setText("Sync"); // NOI18N
        jButtonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportActionPerformed(evt);
            }
        });

        jButtonReadGameList.setText("Read gamelist.xml");
        jButtonReadGameList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReadGameListActionPerformed(evt);
            }
        });

        jButtonAbort.setText("Abort");
        jButtonAbort.setEnabled(false);
        jButtonAbort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAbortActionPerformed(evt);
            }
        });

        jLabelAction.setText("Action: ");

        jButtonSave.setText("Save");
        jButtonSave.setToolTipText("");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelAction, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextFieldPathSource)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonOptionSelectFolderSource))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextFieldPathExport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(jButtonScanSource)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonScore)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonExport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonReadGameList)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(3, 3, 3)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonAbort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonOptionSelectFolderExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPathSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOptionSelectFolderSource)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPathExport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOptionSelectFolderExport)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonScanSource)
                    .addComponent(jButtonScore)
                    .addComponent(jButtonExport)
                    .addComponent(jButtonReadGameList)
                    .addComponent(jButtonSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAbort)
                    .addComponent(jLabelAction))
                .addContainerGap())
        );

        jListFilterConsole.setModel(new DefaultListModel());
        jListFilterConsole.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListFilterConsole.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListFilterConsoleValueChanged(evt);
            }
        });
        jScrollPaneSelectGenre1.setViewportView(jListFilterConsole);

        jListFilterGenre.setModel(new DefaultListModel());
        jListFilterGenre.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListFilterGenre.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListFilterGenreValueChanged(evt);
            }
        });
        jScrollPaneSelectGenre2.setViewportView(jListFilterGenre);

        jListFilterRating.setModel(new DefaultListModel());
        jListFilterRating.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListFilterRating.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListFilterRatingValueChanged(evt);
            }
        });
        jScrollPaneSelectGenre4.setViewportView(jListFilterRating);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneSelectGenre1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPaneSelectGenre4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPaneSelectGenre2))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPaneSelectGenre1, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneSelectGenre2, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneSelectGenre4, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE))
        );

        jSplitPane2.setLeftComponent(jPanel3);

        jTableRom.setAutoCreateColumnsFromModel(false);
        jTableRom.setModel(new rommanager.main.TableModelRom());
        jTableRom.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTableRom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableRomMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableRomMouseClicked(evt);
            }
        });
        jScrollPaneCheckTags1.setViewportView(jTableRom);

        jSplitPane1.setLeftComponent(jScrollPaneCheckTags1);

        jListVersions.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jListVersionsFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jListVersions);

        jButtonAuto.setText("Auto");
        jButtonAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAutoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAuto)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButtonAuto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        jSplitPane2.setRightComponent(jSplitPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSplitPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonScanSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonScanSourceActionPerformed
		disableGUI("Listing : ");
		String sourcePath = jTextFieldPathSource.getText();
		File file = new File(sourcePath);
		if(!file.exists()) {
			Popup.warning("Source path does not exist.");
			enableGUI();
			return;
		}
		processList = new ProcessList(sourcePath, progressBar, tableModel, new CallBackProcess());
		processList.browseNbFiles();		
		DialogConsole.main(new CallBackDialogConsoleScan(), true, "Scan Source");
    }//GEN-LAST:event_jButtonScanSourceActionPerformed

	private class CallBackDialogConsoleScan implements ICallBackConsole {
		@Override
		public void completed(boolean refresh) {
			processList.start(refresh);
		}
	}
	
	private class CallBackProcess implements ICallBackProcess {
		@Override
		public void completed() {
			enableGUI();
		}
	}
	
	private static void filter() {
        filter(true);
    }
    
	private static final TableRowFilter filterVideo= new TableRowFilter();
	
    private static void filter(boolean fillLists) {
//        TableRowSorter<TableModelVideo> tableSorter
        //Enable row tableSorter (cannot be done if model is empty)
        if(tableModel.getRowCount()>0) {
            //Enable auto sorter
            jTableRom.setAutoCreateRowSorter(true);
            //Get sorter
            TableRowSorter<TableModelRom> tableSorter = new TableRowSorter<>(tableModel);
            jTableRom.setRowSorter(tableSorter);
            //Sort by console, name  (Debug display problem before enabling)
//            List <RowSorter.SortKey> sortKeys = new ArrayList<>();
//            sortKeys.add(new RowSorter.SortKey(3, SortOrder.ASCENDING));
//            sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
//            tableSorter.setSortKeys(sortKeys);
            //Désactive le tri pour
//            tableSorter.setSortable(0, false); // Checkbox
//            tableSorter.setSortable(1, false); // Thumbnail
//            tableSorter.setSortable(4, false); // Synopsis
            //Filter, Apply current filter
            tableSorter.setRowFilter(filterVideo);

            if(fillLists) {
				List<String> consoles=tableModel.getRoms().values().stream().map(r -> r.getConsoleStr()).distinct().collect(Collectors.toList());
				List<String> genres=tableModel.getRoms().values().stream().map(r -> r.getGame().getGenre()).distinct().collect(Collectors.toList());
				List<String> ratings=tableModel.getRoms().values().stream().map(r -> String.valueOf(r.getGame().getRating())).distinct().collect(Collectors.toList());

				jListFilterConsole.setModel(getModel(consoles));
				jListFilterGenre.setModel(getModel(genres));
				jListFilterRating.setModel(getModel(ratings));

				jListFilterConsole.setSelectedIndex(0);
				jListFilterGenre.setSelectedIndex(0);
				jListFilterRating.setSelectedIndex(0);
            }
        }
        else {
            jTableRom.setAutoCreateRowSorter(false);
        }
    }
	
    private void jButtonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportActionPerformed
        disableGUI("Exporting : ");
		String exportPath = jTextFieldPathExport.getText();
		File folder = new File(exportPath);
		if(!folder.exists()) {
			enableGUI();
			Popup.warning("Export path does not exist.");
			return;
		}
		String sourcePath = jTextFieldPathSource.getText();
		folder = new File(sourcePath);
		if(!folder.exists()) {
			Popup.warning("Source path does not exist.");
			enableGUI();
			return;
		}
		processExport = new ProcessExport(
				sourcePath, 
				exportPath, 
				progressBar, 
				tableModel, 
				new CallBackProcess());
		processList = new ProcessList(sourcePath, progressBar, tableModel, new CallBackProcess());
		processList.browseNbFiles();
		DialogConsole.main(new CallBackDialogConsoleExport(), false, "Sync");
    }//GEN-LAST:event_jButtonExportActionPerformed

	private class CallBackDialogConsoleExport implements ICallBackConsole {
		@Override
		public void completed(boolean refresh) {
			processExport.start();
		}
	}
	
	private void disableGUI(String text) {
		jLabelAction.setText(text);
		jTableRom.setAutoCreateRowSorter(false);
		jTableRom.setRowSorter(null);
		enableGUI(false);
	}
	
	public void enableGUI() {
		enableGUI(true);
		filter();
	}
	
	private static void enableGUI(boolean enable) {
		jButtonScanSource.setEnabled(enable);
		jButtonScore.setEnabled(enable);
		jButtonExport.setEnabled(enable);
		jButtonReadGameList.setEnabled(enable);
		jButtonSave.setEnabled(enable);
		
		jButtonOptionSelectFolderExport.setEnabled(enable);
		jButtonOptionSelectFolderSource.setEnabled(enable);
		
		jButtonAbort.setText("Abort");
		jButtonAbort.setEnabled(!enable);
	}
	
    private void jTableRomMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRomMousePressed
        if ( SwingUtilities.isRightMouseButton( evt ) )
        {
            Point p = evt.getPoint();
            int rowNumber = jTableRom.rowAtPoint( p );
            ListSelectionModel model = jTableRom.getSelectionModel();
            model.setSelectionInterval( rowNumber, rowNumber );
        }
    }//GEN-LAST:event_jTableRomMousePressed

    private void jTableRomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRomMouseClicked
		RomContainer romContainer=getRomContainer();
		if(romContainer!=null) {
			displayVersions(romContainer.getVersions());
		}
    }//GEN-LAST:event_jTableRomMouseClicked

	private void displayVersions(List<RomVersion> versions) {
		DefaultListModel versionsModel = new DefaultListModel();
			int i=0;
			List<Integer> indices=new ArrayList();
			Collections.sort(versions, (RomVersion o1, RomVersion o2) -> {
				//ORDER BY getScore DESC
				if (o1.getScore() == o2.getScore())
					return 0;
				else if (o1.getScore() < o2.getScore())
					return 1;
				else
					return -1;
			});
			for(RomVersion romVersion : versions) {
				versionsModel.addElement(romVersion);
				if(romVersion.isExportable()) {
					indices.add(i);
				}
				i++;
			}
			jListVersions.setModel(versionsModel);
			
			int[] indicesArray = new int[indices.size()];
			for(i = 0; i < indices.size(); i++) { indicesArray[i] = indices.get(i); }
			
			jListVersions.setSelectedIndices(indicesArray);
	}
	
	private RomContainer getRomContainer() {
		RomContainer romContainer=null;
		int selectedRow = jTableRom.getSelectedRow(); 		
		if(selectedRow>=0) { 			
			selectedRow = jTableRom.convertRowIndexToModel(selectedRow);
			romContainer = tableModel.getRom(selectedRow);
		}
		return romContainer;
	}
	
    private void jButtonReadGameListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReadGameListActionPerformed
		disableGUI("Reading gamelist.xml : ");
		String exportPath = jTextFieldPathExport.getText();
		File file = new File(exportPath);
		if(!file.exists()) {
			enableGUI();
			Popup.warning("Export path does not exist.");
			return;
		}
		processRead = new ProcessRead(exportPath, progressBar, tableModel, new CallBackProcess());
		processRead.start();
    }//GEN-LAST:event_jButtonReadGameListActionPerformed

    private void jButtonOptionSelectFolderExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOptionSelectFolderExportActionPerformed
        String selectedFolder=selectFolder(jTextFieldPathExport.getText());
        if(!selectedFolder.equals("")) {  //NOI18N
			RomManager.options.set("romset.exportPath", selectedFolder);
			RomManager.options.save();
            jTextFieldPathExport.setText(selectedFolder);
        }
    }//GEN-LAST:event_jButtonOptionSelectFolderExportActionPerformed

    private void jButtonOptionSelectFolderSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOptionSelectFolderSourceActionPerformed
		String selectedFolder=selectFolder(jTextFieldPathSource.getText());
        if(!selectedFolder.equals("")) {  //NOI18N
			RomManager.options.set("romset.sourcePath", selectedFolder);
			RomManager.options.save();
            jTextFieldPathSource.setText(selectedFolder);
        }
    }//GEN-LAST:event_jButtonOptionSelectFolderSourceActionPerformed

    private void jButtonAbortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAbortActionPerformed
        jButtonAbort.setEnabled(false);
		jButtonAbort.setText("Aborting...");
		abort(processList);
		abort(processExport);
		abort(processRead);
    }//GEN-LAST:event_jButtonAbortActionPerformed

    private void jButtonScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonScoreActionPerformed
	
        disableGUI("Setting score : ");
        String sourcePath = jTextFieldPathSource.getText();
        File file = new File(sourcePath);
        if(!file.exists()) {
            Popup.warning("Source path does not exist.");
            enableGUI();
            return;
        }
        processSetScore = new ProcessSetScore(progressBar, tableModel, new CallBackProcess(), sourcePath);
        processList = new ProcessList(sourcePath, progressBar, tableModel, new CallBackProcess());
        processList.browseNbFiles();
        DialogConsole.main(new CallBackDialogConsoleScore(), false, "Set Score");
    }//GEN-LAST:event_jButtonScoreActionPerformed

    private class CallBackDialogConsoleScore implements ICallBackConsole {
		@Override
		public void completed(boolean refresh) {
            //FIXME 12 option : set best as exportable OR leave exportable flag unchanged
            int n = JOptionPane.showConfirmDialog(null, "Are you sure you want to set score ? It will RESET ALL your selections !!!",  //NOI18N
            "Please Confirm",  //NOI18N
            JOptionPane.YES_NO_OPTION);
            if (n == JOptionPane.YES_OPTION) {
                processSetScore.start();
            } else {
                enableGUI();
            }
		}
	}
    
    private void jListVersionsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jListVersionsFocusLost
		DefaultListModel versionsModel = (DefaultListModel)jListVersions.getModel();
		int i=0;
		for (Iterator it = Collections.list(versionsModel.elements()) .iterator(); it.hasNext();) {
			RomVersion romVersion = (RomVersion) it.next();
			romVersion.setExportable(selectedIndicesContains(i));
			i++;
		}
    }//GEN-LAST:event_jListVersionsFocusLost

    private void jButtonAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAutoActionPerformed
        RomContainer romContainer=getRomContainer();
		if(romContainer!=null) {
			romContainer.setBestExportable();
			displayVersions(romContainer.getVersions());
//			tableModel.fireTableDataChanged(); //TODO: Uncomment when fire does not deselect line in jtable
		}
    }//GEN-LAST:event_jButtonAutoActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        disableGUI("Saving : ");
		String sourcePath = jTextFieldPathSource.getText();
		File file = new File(sourcePath);
		if(!file.exists()) {
			Popup.warning("Source path does not exist.");
			enableGUI();
			return;
		}
		new SaveOds(new CallBackProcess(), sourcePath).start();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jListFilterConsoleValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListFilterConsoleValueChanged
        if(jListFilterConsole.getSelectedValue()!=null && !evt.getValueIsAdjusting()) {
            filterVideo.displayByConsole((String) jListFilterConsole.getSelectedValue());
            filter(false);
        }
    }//GEN-LAST:event_jListFilterConsoleValueChanged

    private void jListFilterGenreValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListFilterGenreValueChanged
        if(jListFilterGenre.getSelectedValue()!=null && !evt.getValueIsAdjusting()) {
            filterVideo.displayByGenre((String) jListFilterGenre.getSelectedValue());
            filter(false);
        }
    }//GEN-LAST:event_jListFilterGenreValueChanged

    private void jListFilterRatingValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListFilterRatingValueChanged
        if(jListFilterRating.getSelectedValue()!=null && !evt.getValueIsAdjusting()) {
            filterVideo.displayByRating((String) jListFilterRating.getSelectedValue());
            filter(false);
        }
    }//GEN-LAST:event_jListFilterRatingValueChanged
    
	private class SaveOds extends ProcessAbstract {
		private final ICallBackProcess callBack;
		private final String sourceFolder;
		public SaveOds(ICallBackProcess callBack, String sourceFolder) {
			super("Thread.RomManagerGUI.ReadOds");
			this.callBack = callBack;
			this.sourceFolder = sourceFolder;
		}
		@Override
		public void run() {
			progressBar.setIndeterminate("Saving ods file");
			RomManagerOds.createFile(tableModel, progressBar, sourceFolder);
			progressBar.reset();
			callBack.completed();
		}
	}
	
	private boolean selectedIndicesContains(int value) {
		return IntStream.of(jListVersions.getSelectedIndices()).anyMatch(x -> x == value);
	}
	
	private void abort(ProcessAbstract process) {
		if(process!=null && process.isAlive()) {
			process.abort();
		}
	}
	
    public static String selectFolder(String defaultFolder) {
		JFileChooser fc = new JFileChooser(defaultFolder);
		fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int returnVal = fc.showOpenDialog(null);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selFile = fc.getSelectedFile();
			return selFile.getAbsolutePath();
        } else {
			return "";  //NOI18N
        }
	}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | 
				IllegalAccessException | 
				javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RomManagerGUI.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(() -> {
			RomManagerGUI panel = new RomManagerGUI();
			panel.setLocationRelativeTo(null);
			panel.setExtendedState(RomManagerGUI.MAXIMIZED_BOTH);
			panel.setVisible(true);
		});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton jButtonAbort;
    private javax.swing.JButton jButtonAuto;
    private static javax.swing.JButton jButtonExport;
    private static javax.swing.JButton jButtonOptionSelectFolderExport;
    private static javax.swing.JButton jButtonOptionSelectFolderSource;
    private static javax.swing.JButton jButtonReadGameList;
    private static javax.swing.JButton jButtonSave;
    private static javax.swing.JButton jButtonScanSource;
    private static javax.swing.JButton jButtonScore;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelAction;
    private static javax.swing.JList jListFilterConsole;
    private static javax.swing.JList jListFilterGenre;
    private static javax.swing.JList jListFilterRating;
    private javax.swing.JList<String> jListVersions;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private static javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JScrollPane jScrollPaneCheckTags1;
    private javax.swing.JScrollPane jScrollPaneSelectGenre1;
    private javax.swing.JScrollPane jScrollPaneSelectGenre2;
    private javax.swing.JScrollPane jScrollPaneSelectGenre4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private static javax.swing.JTable jTableRom;
    private static javax.swing.JTextField jTextFieldPathExport;
    private static javax.swing.JTextField jTextFieldPathSource;
    // End of variables declaration//GEN-END:variables
}
