/*
 * Copyright (C) 2011 phramusca ( https://github.com/phramusca/JaMuz/ )
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package rommanager.main;

import java.awt.Frame;
import java.util.List;
import org.apache.commons.io.FilenameUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import rommanager.utils.XML;

/**
 * JDialog extension to add/modify Stat source
 * @author phramusca ( https://github.com/phramusca/JaMuz/ )
 */
public class DialogRomEdition extends javax.swing.JDialog {

    Document doc;
	String gamelistFilename;
    Element elementGame;
	Element elementFavorite;
    Element elementHidden;
    Element elementAdult;
    RomContainer romContainer;
    private final ICallBackProcess callback;
	
	/** Creates new form StatSourceGUI
	 * @param parent
	 * @param modal  
     * @param console  
     * @param romContainer  
     * @param gamelistFilename
     * @param callback
	 */
    public DialogRomEdition(Frame parent, boolean modal, Console console, RomContainer romContainer, String gamelistFilename, ICallBackProcess callback) {
        super(parent, modal);
        initComponents();
		this.gamelistFilename = gamelistFilename;
        this.romContainer = romContainer;
        this.callback = callback;
        RomVersion exportRomVersion = romContainer.getExportableVersions().get(0); //FIXME 8 What if != 0 ?
        jTextName.setText(exportRomVersion.getExportFilename(console));
        doc = XML.open(gamelistFilename);
        if(doc!=null) {
            String path = FilenameUtils.concat(console.getName(), exportRomVersion.getExportFilename(console));
            List<Element> evaluateXPath = XML.evaluateXPath(doc, "//gameList/game[./path[. = \""+path+"\"]]");
            if(!evaluateXPath.isEmpty()) {
                elementGame = evaluateXPath.get(0); //FIXME 8 What if > 1 ?
                elementFavorite = XML.getElement(elementGame, "favorite");
                elementHidden = XML.getElement(elementGame, "hidden");
                elementAdult = XML.getElement(elementGame, "adult");

                boolean favoriteValue = Boolean.parseBoolean(XML.getElementValue(elementFavorite));
                boolean hiddenValue = Boolean.parseBoolean(XML.getElementValue(elementHidden));
                boolean adultValue = Boolean.parseBoolean(XML.getElementValue(elementAdult));

                jCheckBoxFavorite.setSelected(favoriteValue);
                jCheckBoxHidden.setSelected(hiddenValue);
                jCheckBoxAdult.setSelected(adultValue);
            }
            
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextName = new javax.swing.JTextField();
        jButtonCancel = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jCheckBoxFavorite = new javax.swing.JCheckBox();
        jCheckBoxHidden = new javax.swing.JCheckBox();
        jCheckBoxAdult = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit rom version");
        setModal(true);

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("rommanager/main/Bundle"); // NOI18N
        jCheckBoxFavorite.setText(bundle.getString("DialogRomEdition.jCheckBoxFavorite.text")); // NOI18N

        jCheckBoxHidden.setText(bundle.getString("DialogRomEdition.jCheckBoxHidden.text")); // NOI18N

        jCheckBoxAdult.setText(bundle.getString("DialogRomEdition.jCheckBoxAdult.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonCancel)
                        .addGap(10, 10, 10)
                        .addComponent(jButtonSave))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextName)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jCheckBoxFavorite)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxHidden)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxAdult)
                                .addGap(0, 176, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxFavorite)
                    .addComponent(jCheckBoxHidden)
                    .addComponent(jCheckBoxAdult))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonSave))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        setElementValue(elementFavorite, "favorite", jCheckBoxFavorite.isSelected());
        setElementValue(elementHidden, "hidden", jCheckBoxHidden.isSelected());
        setElementValue(elementAdult, "adult", jCheckBoxAdult.isSelected());
        XML.save(gamelistFilename, doc);
        
        romContainer.getExportableVersions().get(0).getGame().setFavorite(jCheckBoxFavorite.isSelected());
        romContainer.getExportableVersions().get(0).getGame().setHidden(jCheckBoxHidden.isSelected());
        romContainer.getExportableVersions().get(0).getGame().setAdult(jCheckBoxAdult.isSelected());
        romContainer.resetGame();
        
        callback.completed();
        this.dispose();
	}//GEN-LAST:event_jButtonSaveActionPerformed

    private void setElementValue(Element element, String key, boolean value) {
        if(element!=null) {
            element.setTextContent(String.valueOf(value));
        } else {
            Element createElement = doc.createElement(key);
            createElement.setTextContent(String.valueOf(value));
            elementGame.appendChild(createElement);
        }
    }
    
	private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
		this.dispose();
	}//GEN-LAST:event_jButtonCancelActionPerformed

    /**
	 * Open the GUI
	 * @param parent
     * @param console 
     * @param romContainer 
     * @param gamelistFilename 
     * @param callback 
	 */
    public static void main(Frame parent, Console console, RomContainer romContainer, String gamelistFilename, ICallBackProcess callback) {
        java.awt.EventQueue.invokeLater(() -> {
			DialogRomEdition dialog = new DialogRomEdition(parent, true, console, romContainer, gamelistFilename, callback);
			dialog.setLocationRelativeTo(parent);
			dialog.setVisible(true);
		});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxAdult;
    private javax.swing.JCheckBox jCheckBoxFavorite;
    private javax.swing.JCheckBox jCheckBoxHidden;
    private static javax.swing.JTextField jTextName;
    // End of variables declaration//GEN-END:variables

}
