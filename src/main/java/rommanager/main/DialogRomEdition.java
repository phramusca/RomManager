/*
 * Copyright (C) 2011 phramusca ( https://github.com/phramusca/JaMuz/ )
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package rommanager.main;

import java.awt.Frame;
import java.util.List;

/**
 * JDialog extension to add/modify Stat source
 * @author phramusca ( https://github.com/phramusca/JaMuz/ )
 */
public class DialogRomEdition extends javax.swing.JDialog {

    List<RomVersion> romVersions;
    private final ICallBackProcess callback;
	
	/** Creates new form StatSourceGUI
	 * @param parent
	 * @param modal  
     * @param romVersions  
     * @param callback
	 */
    public DialogRomEdition(Frame parent, boolean modal, List<RomVersion> romVersions, ICallBackProcess callback) {
        super(parent, modal);
        initComponents();
        this.romVersions = romVersions;
        this.callback = callback;
        
        // Initialize UI with values from the first RomVersion (or show mixed state if different)
        initializeUI();
    }
    
    private void initializeUI() {
        if (romVersions.isEmpty()) {
            return;
        }
        
        // Get values from first RomVersion
        Game firstGame = romVersions.get(0).getGame();
        String firstName = firstGame.getName();
        boolean firstFavorite = firstGame.isFavorite();
        boolean firstHidden = firstGame.isHidden();
        boolean firstAdult = firstGame.isAdult();
        
        // Check if all versions have the same values
        boolean allSameName = romVersions.stream().allMatch(rv -> rv.getGame().getName().equals(firstName));
        boolean allSameFavorite = romVersions.stream().allMatch(rv -> rv.getGame().isFavorite() == firstFavorite);
        boolean allSameHidden = romVersions.stream().allMatch(rv -> rv.getGame().isHidden() == firstHidden);
        boolean allSameAdult = romVersions.stream().allMatch(rv -> rv.getGame().isAdult() == firstAdult);
        
        // Set UI values
        jTextName.setText(allSameName ? firstName : "[Multiple values]");
        jCheckBoxFavorite.setSelected(allSameFavorite ? firstFavorite : false);
        jCheckBoxHidden.setSelected(allSameHidden ? firstHidden : false);
        jCheckBoxAdult.setSelected(allSameAdult ? firstAdult : false);
        
        // Update title to show number of selected versions
        setTitle("Edit " + romVersions.size() + " rom version(s)");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextName = new javax.swing.JTextField();
        jButtonCancel = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jCheckBoxFavorite = new javax.swing.JCheckBox();
        jCheckBoxHidden = new javax.swing.JCheckBox();
        jCheckBoxAdult = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit rom version");
        setModal(true);

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("rommanager/main/Bundle"); // NOI18N
        jCheckBoxFavorite.setText(bundle.getString("DialogRomEdition.jCheckBoxFavorite.text")); // NOI18N

        jCheckBoxHidden.setText(bundle.getString("DialogRomEdition.jCheckBoxHidden.text")); // NOI18N

        jCheckBoxAdult.setText(bundle.getString("DialogRomEdition.jCheckBoxAdult.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonCancel)
                        .addGap(10, 10, 10)
                        .addComponent(jButtonSave))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextName)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jCheckBoxFavorite)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxHidden)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxAdult)
                                .addGap(0, 176, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxFavorite)
                    .addComponent(jCheckBoxHidden)
                    .addComponent(jCheckBoxAdult))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonSave))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        // Apply changes to all selected RomVersions
        for (RomVersion romVersion : romVersions) {
            // Only update name if it's not "[Multiple values]"
            if (!jTextName.getText().equals("[Multiple values]")) {
                romVersion.getGame().setName(jTextName.getText());
            }
            romVersion.getGame().setFavorite(jCheckBoxFavorite.isSelected());
            romVersion.getGame().setHidden(jCheckBoxHidden.isSelected());
            romVersion.getGame().setAdult(jCheckBoxAdult.isSelected());
        }
        callback.actionPerformed();
        callback.completed();
        this.dispose();
	}//GEN-LAST:event_jButtonSaveActionPerformed
    
	private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
		this.dispose();
	}//GEN-LAST:event_jButtonCancelActionPerformed

    /**
	 * Open the GUI
	 * @param parent
     * @param romVersions 
     * @param callback 
	 */
    public static void main(Frame parent, List<RomVersion> romVersions, ICallBackProcess callback) {
        java.awt.EventQueue.invokeLater(() -> {
			DialogRomEdition dialog = new DialogRomEdition(parent, true, romVersions, callback);
			dialog.setLocationRelativeTo(parent);
			dialog.setVisible(true);
		});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxAdult;
    private javax.swing.JCheckBox jCheckBoxFavorite;
    private javax.swing.JCheckBox jCheckBoxHidden;
    private static javax.swing.JTextField jTextName;
    // End of variables declaration//GEN-END:variables

}
